import os
import pickle
import pandas as pd
import logging
from pathlib import Path
from logging.config import fileConfig
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

parent_dir = Path(os.path.realpath(__file__))
fileConfig(str(parent_dir.parents[1]) + '/config/' + 'logging_config.ini')
logger = logging.getLogger(__name__)

logger.info("Loading training data..")
data = pd.read_csv("../Data/ML-MATT-CompetitionQT2021_train.csv", delimiter=";")
data.drop_duplicates()
data = data.drop(columns = ['Time', 'CellName'])
y = data['Unusual']
X = data.drop('Unusual', axis=1)
X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)

logger.info("Loading best model configuration..")
with open("best_model_artifacts/params.pkl", "rb") as f:
    config = pickle.load(f)

logger.info("Training model with the best config..")
model = RandomForestClassifier(n_estimators=config["rand_forest_estimator"], max_depth=config["random_forest_depth"])
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(accuracy)

# Convert into ONNX format
logger.info("Exporting model to .onnx ..")
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
initial_type = [('float_input', FloatTensorType([None, 11]))]
onx = convert_sklearn(model, initial_types=initial_type)
with open("best_model_artifacts/best_model.onnx", "wb") as f:
    f.write(onx.SerializeToString())