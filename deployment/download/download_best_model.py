# This script downloads the best performing model config and saves it locally
import os
import sys
from pathlib import Path
parent_dir = Path(os.path.realpath(__file__))
sys.path.append(str(parent_dir.parents[1]))

import logging
import mlflow
from config import config
from azure.ai.ml import MLClient
from logging.config import fileConfig
from azure.identity import DefaultAzureCredential

fileConfig(str(parent_dir.parents[1]) + '/config/' + 'logging_config.ini')
logger = logging.getLogger(__name__)

logger.info("Instantiating client")
os.environ["AZURE_CLIENT_ID"] = config.AZURE_CLIENT_ID  # service principal's app id
os.environ["AZURE_TENANT_ID"] = config.AZURE_TENANT_ID # id of the principal's Azure Active Directory tenant
os.environ["AZURE_CLIENT_SECRET"] = config.AZURE_CLIENT_SECRET # one of the service principal's client secrets
ml_client = MLClient(
    DefaultAzureCredential(),
    config.SUBSCRIPTION_ID,
    config.RESOURCE_GROUP,
    config.WORKSPACE
)

# Set up mlflow to use Azure remote
logger.info("Fetching MLFlow tracking URI")
mlflow_tracking_uri = ml_client.workspaces.get(ml_client.workspace_name).mlflow_tracking_uri
mlflow.set_tracking_uri(mlflow_tracking_uri)
print(mlflow_tracking_uri)

# Get the best run based on the provided optimization metric 
logger.info(f"Searching for the best run in experiment: {config.EXPERIMENT_NAME}")
runs = mlflow.search_runs( experiment_ids=mlflow.get_experiment_by_name(config.EXPERIMENT_NAME).experiment_id )
logger.info(f"Got {len(runs)} runs")

best_run_id = runs.loc[runs[f'metrics.{config.OPTIMIZATION_METRIC}'].idxmax()].run_id
best_run = mlflow.get_run(best_run_id)
logging.info(f"Best model has {best_run.data.metrics[f'{config.OPTIMIZATION_METRIC}']:3.3f} {config.OPTIMIZATION_METRIC}")

# Download artifacts from the best run
mlflow.artifacts.download_artifacts(run_id=best_run_id, dst_path="best_model_artifacts/")

