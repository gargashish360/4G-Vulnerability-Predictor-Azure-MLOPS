import os
import tempfile
import time
import mlflow
import ray
from ray import air, tune
from ray.air import session
from ray.air.integrations.mlflow import MLflowLoggerCallback, setup_mlflow
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

data_4g = pd.read_csv("./Data/ML-MATT-CompetitionQT2021_train.csv", sep = ';')
data_4g.drop_duplicates()
# Dropping time and cell name column:
data_4g = data_4g.drop(columns = ['Time', 'CellName'])
y = data_4g['Unusual']
X = data_4g.drop('Unusual', axis=1)
X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)


def train_function(config):
    if config["choice"] == "LogisticRegression":
        model = LogisticRegression(C=config["log_reg"]["C"])
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        tune.report(accuracy=accuracy)
    if config["choice"] == "RandomForest":
        model = RandomForestClassifier(n_estimators=config["rand_forest_estimator"], max_depth=config["random_forest_depth"])
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        tune.report(accuracy=accuracy)

def tune_with_callback(mlflow_tracking_uri, finish_fast=False):
    tuner = tune.Tuner(
        train_function,
        tune_config=tune.TuneConfig(
            num_samples= 5
        ),
        run_config=air.RunConfig(
            name="mlflow",
            callbacks=[
                MLflowLoggerCallback(
                    tracking_uri=mlflow_tracking_uri,
                    experiment_name="4g_vulnerability",
                    save_artifact=True,
                )
            ],
        ),
        param_space={
            "log_reg": {"C": tune.loguniform(0.01, 10)},   
            "rand_forest_estimator": tune.grid_search([100, 200]),
            "random_forest_depth": tune.grid_search([10, 20]),
            "choice": tune.grid_search(["LogisticRegression", "RandomForest"])
        },
    )
    results = tuner.fit()

smoke_test = False
mlflow_tracking_uri = "/home/ashish/Azure_MLops/mlruns"
tune_with_callback(mlflow_tracking_uri, finish_fast=smoke_test)
df = mlflow.search_runs([mlflow.get_experiment_by_name("4g_vulnerability").experiment_id])
print(df)
